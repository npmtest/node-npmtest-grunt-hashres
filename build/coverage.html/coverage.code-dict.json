{"/home/travis/build/npmtest/node-npmtest-grunt-hashres/test.js":"/* istanbul instrument in package npmtest_grunt_hashres */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/lib.npmtest_grunt_hashres.js":"/* istanbul instrument in package npmtest_grunt_hashres */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_hashres = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_hashres = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-hashres && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_hashres */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_hashres\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_hashres.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_hashres.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_hashres.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_hashres.__dirname + '/lib.npmtest_grunt_hashres.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/node_modules/grunt-hashres/Gruntfile.js":"/*\n * grunt-hashres\n * https://github.com/luismahou/grunt-hashres\n *\n * Copyright (c) 2013 luismahou\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= vows.all.files %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    vows: {\n      all: {\n        files: 'test/*.spec.js'\n      }\n    }\n\n  });\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-vows');\n\n  grunt.registerTask('default', ['jshint', 'vows']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/node_modules/grunt-hashres/tasks/hashresHelper.js":"/*\n * grunt-hashres\n * https://github.com/luismahou/grunt-hashres\n *\n * Copyright (c) 2013 Luismahou\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar fs    = require('fs'),\n    path  = require('path'),\n    utils = require('./hashresUtils');\n\nexports.hashAndSub = function(grunt, options) {\n\n  var src              = options.src,\n      dest             = options.dest,\n      encoding         = options.encoding,\n      fileNameFormat   = options.fileNameFormat,\n      renameFiles      = options.renameFiles,\n      nameToHashedName = {},\n      nameToNameSearch = {},\n      formatter        = null,\n      searchFormatter  = null;\n\n  grunt.log.debug('files: ' + options.files);\n  grunt.log.debug('Using encoding ' + encoding);\n  grunt.log.debug('Using fileNameFormat ' + fileNameFormat);\n  grunt.log.debug(renameFiles ? 'Renaming files' : 'Not renaming files');\n\n  formatter = utils.compileFormat(fileNameFormat);\n  searchFormatter = utils.compileSearchFormat(fileNameFormat);\n\n  if (options.files) {\n    options.files.forEach(function(f) {\n      f.src.forEach(function(src) {\n        var md5        = utils.md5(src).slice(0, 8),\n            fileName   = path.basename(src),\n            lastIndex  = fileName.lastIndexOf('.'),\n            renamed    = formatter({\n              hash: md5,\n              name: fileName.slice(0, lastIndex),\n              ext : fileName.slice(lastIndex + 1, fileName.length)\n            }),\n            nameSearch = searchFormatter({\n              hash: /[0-9a-f]{8}/,\n              name: fileName.slice(0, lastIndex),\n              ext: fileName.slice(lastIndex + 1, fileName.length)\n            });\n\n        // Mapping the original name with hashed one for later use.\n        nameToHashedName[fileName] = renamed;\n        nameToNameSearch[fileName] = nameSearch;\n\n        // Renaming the file\n        if (renameFiles) {\n          fs.renameSync(src, path.resolve(path.dirname(src), renamed));\n        }\n        grunt.log.write(src + ' ').ok(renamed);\n      });\n\n      // sort by length \n      // It is very useful when we have bar.js and foo-bar.js \n      // @crodas\n      var files = [];\n      for (var name in nameToHashedName) {\n        files.push([name, nameToHashedName[name]]);\n      }\n      files.sort(function(a, b) {\n        return b[0].length - a[0].length;\n      });\n\n\n\n      // Substituting references to the given files with the hashed ones.\n      grunt.file.expand(f.dest).forEach(function(f) {\n        var destContents = fs.readFileSync(f, encoding);\n        files.forEach(function(value) {\n          grunt.log.debug('Substituting ' + value[0] + ' by ' + value[1])\n          destContents = destContents.replace(new RegExp(utils.preg_quote(value[0])+\"(\\\\?[0-9a-z]+)?\", \"g\"), value[1]);\n\n          grunt.log.debug('Substituting ' + nameToNameSearch[value[0]] + ' by ' + value[1])\n          destContents = destContents.replace(\n                new RegExp(nameToNameSearch[value[0]], \"g\"), \n                value[1]\n            );\n        });\n        grunt.log.debug('Saving the updated contents of the outination file');\n        fs.writeFileSync(f, destContents, encoding);\n      });\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/node_modules/grunt-hashres/tasks/hashresUtils.js":"/*\n * grunt-hashres\n * https://github.com/luismahou/grunt-hashres\n *\n * Copyright (c) 2013 Luismahou\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar crypto = require('crypto'),\n    fs     = require('fs');\n\nfunction preg_quote (str, delimiter) {\n  // http://kevin.vanzonneveld.net\n  // +   original by: booeyOH\n  // +   improved by: Ates Goral (http://magnetiq.com)\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +   bugfixed by: Onno Marsman\n  // +   improved by: Brett Zamir (http://brett-zamir.me)\n  // *     example 1: preg_quote(\"$40\");\n  // *     returns 1: '\\$40'\n  // *     example 2: preg_quote(\"*RRRING* Hello?\");\n  // *     returns 2: '\\*RRRING\\* Hello\\?'\n  // *     example 3: preg_quote(\"\\\\.+*?[^]$(){}=!<>|:\");\n  // *     returns 3: '\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:'\n  return (str + '').replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\' + (delimiter || '') + '-]', 'g'), '\\\\$&');\n}\n\nexports.preg_quote = preg_quote;\n\nfunction escapeNonRegex(input) {\n  return (input instanceof RegExp) ? input.source : preg_quote(input);\n}\n\n// Generates a function for the given format\n// Valid format variables: ${hash}, ${name} and ${ext}\nexports.compileFormat = function(format) {\n  return function(options) {\n    var output = format.replace(/\\$\\{hash\\}/g, options.hash);\n    output = output.replace(/\\$\\{name\\}/g, options.name);\n    output = output.replace(/\\$\\{ext\\}/g, options.ext);\n    return output;\n  };\n};\n\n// Generates a function for the given format as a regex string\n// Valid format variables: ${hash}, ${name} and ${ext}\nexports.compileSearchFormat = function(format) {\n  format = preg_quote(format);\n  return function(options) {\n    var output = format.split('\\\\$\\\\{hash\\\\}').join(escapeNonRegex(options.hash));\n    output = output.split('\\\\$\\\\{name\\\\}').join(escapeNonRegex(options.name));\n    output = output.split('\\\\$\\\\{ext\\\\}').join(escapeNonRegex(options.ext));\n    return output;\n  };\n};\n\n// Generates the md5 for the given file\nexports.md5 = function(filepath) {\n  var hash = crypto.createHash('md5');\n  hash.update(fs.readFileSync(String(filepath), 'utf8'));\n  return hash.digest('hex');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-hashres/node_modules/grunt-hashres/tasks/hashres.js":"/*\n * grunt-hashres\n * https://github.com/luismahou/grunt-hashres\n *\n * Copyright (c) 2013 luismahou\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  var helper = require('./hashresHelper');\n\n  grunt.registerMultiTask('hashres', 'Your task description goes here.', function() {\n\n    // Merging options with defaults\n    var options = this.options({\n      fileNameFormat: '${hash}.${name}.cache.${ext}',\n      encoding      : 'utf8',\n      renameFiles   : true\n    });\n\n    // Required properties: 'src' and 'dest'\n    this.requiresConfig(this.name + '.' + this.target + '.src');\n    this.requiresConfig(this.name + '.' + this.target + '.dest');\n    helper.hashAndSub(grunt, {\n      files: this.files,\n      src           : options.src,\n      dest          : options.dest,\n      encoding      : options.encoding,\n      fileNameFormat: options.fileNameFormat,\n      renameFiles   : options.renameFiles\n    });\n  });\n\n};\n"}